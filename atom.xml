<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codeTalk</title>
  <subtitle>好事是要做的，前程也是要问的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-06-08T06:39:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zjcai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git命令整理</title>
    <link href="http://yoursite.com/2016/06/08/Git%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2016/06/08/Git命令整理/</id>
    <published>2016-06-08T05:47:41.000Z</published>
    <updated>2016-06-08T06:39:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Git初始化&quot;&gt;&lt;a href=&quot;#Git初始化&quot; class=&quot;headerlink&quot; title=&quot;Git初始化&quot;&gt;&lt;/a&gt;Git初始化&lt;/h2&gt;&lt;p&gt;安装 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo yum install git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git clone git://git.kernel.org/pub/scm/git/git.git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;帮助&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git help &lt;code&gt;add&lt;/code&gt;&lt;br&gt;git &lt;code&gt;add&lt;/code&gt; –help&lt;br&gt;man git-&lt;code&gt;add&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;add&lt;/code&gt;可以换成其他命令如:&lt;code&gt;merge&lt;/code&gt;,&lt;code&gt;commit&lt;/code&gt;等&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;更新改动到本地仓库&quot;&gt;&lt;a href=&quot;#更新改动到本地仓库&quot; class=&quot;headerlink&quot; title=&quot;更新改动到本地仓库&quot;&gt;&lt;/a&gt;更新改动到本地仓库&lt;/h2&gt;&lt;p&gt;在现有目录中初始化仓库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git init&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看本地的被跟踪文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git ls-files&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看目前仓库当前分支的状态&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git status&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;添加需要被跟踪的文件someFile.xx&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git add someFile.xx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;添加需要被跟踪的目录someFilePath&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git add someFileePath&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;添加本目录下所有需要被跟踪的文件&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git add .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上的3个命令如果文件已被跟踪则命令为添加改变到暂存区&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;git add&lt;/code&gt;是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在你想切换分支，但是你还不想提交你正在进行中的工作；所以你储藏这些变更。为了往堆栈推送一个新的储藏，只要运行 git stash&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git stash&lt;br&gt;git stash list  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用储藏表示回到之前的修改的状态，工作区上的文件复原，但是都是未暂存状态，如果之前的文件有暂存的状态，那么想恢复暂存状态-看下一条  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git stash apply&lt;br&gt;git stash apply &lt;code&gt;stashName&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对文件的变更被重新应用，但是被暂存的文件没有重新被暂存。想那样的话，你必须在运行 git stash apply 命令时带上一个 –index 的选项来告诉命令重新应用被暂存的变更 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git stash apply –index &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;丢弃stash &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git stash drop &lt;code&gt;stash@{0}&lt;/code&gt;&lt;br&gt;git stash pop&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;把暂存区的改变提交到仓库&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这会显示一个可以输入大段文字的窗口，让你可以输入注释与提交说明&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit -m”提交说明,注释”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;跳过使用暂存区域：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit -a -m”提交说明,注释”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 &lt;code&gt;git commit&lt;/code&gt;加上 &lt;code&gt;-a&lt;/code&gt; 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 &lt;code&gt;git add&lt;/code&gt; 步骤&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;移除对某些文件的跟踪&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;文件/目录&lt;/code&gt;未被跟踪前配置好&lt;code&gt;.gitignore&lt;/code&gt;文件,如果之前已经跟踪过 ,则需要先移除这个&lt;code&gt;文件/目录&lt;/code&gt;的跟踪,然后再配置&lt;code&gt;.gitignore&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;移除文件的跟踪&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git rm –cached &lt;code&gt;someFile.xx&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;移除目录的跟踪&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git rm -r –cached &lt;code&gt;/Users/Ben/Documents/GoGitService/smartSleep/SmartSleep.xcworkspace/xcuserdata&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-r表示allow recursive removal 递归移除文件目录下所有文件的跟踪&lt;/p&gt;
&lt;p&gt;需要注意的是：&lt;strong&gt;这2个命令移除的跟踪只针对当前的分支有效，如果你有另外一个分支，那么另外的分支还是会跟踪这些文件，你需要在另外的分支中执行相同的命令移除跟踪&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何配置&lt;code&gt;.gitignore&lt;/code&gt;文件&lt;/p&gt;
&lt;p&gt;文件 .gitignore 的格式规范如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。&lt;/li&gt;
&lt;li&gt;可以使用标准的 glob 模式匹配。&lt;/li&gt;
&lt;li&gt;匹配模式最后跟反斜杠（/）说明要忽略的是目录。&lt;/li&gt;
&lt;li&gt;要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技巧：&lt;br&gt;目录是从仓库的根目录开始，去除前面的&lt;em&gt;本机到根目录&lt;/em&gt;的路径，在移除跟踪之后用&lt;code&gt;git status&lt;/code&gt; 查看，有个目录的状态为修改状态，粘贴这个目录到&lt;code&gt;.gitignore&lt;/code&gt;文件就好了&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;本地关于取消修改的操作&quot;&gt;&lt;a href=&quot;#本地关于取消修改的操作&quot; class=&quot;headerlink&quot; title=&quot;本地关于取消修改的操作&quot;&gt;&lt;/a&gt;本地关于取消修改的操作&lt;/h2&gt;&lt;p&gt;修改最后一次提交&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit –amend&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;取消已经暂存的文件&lt;code&gt;file.xx&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git reset HEAD &lt;code&gt;file.xx&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;取消对文件的修改&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git checkout – &lt;code&gt;file.xx&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看版本历史&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git log&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;版本回退到上一个版本&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git reset –hard HEAD^  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回退到某个特定的版本&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git reset –hard 3b8794&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果想撤销回退那么&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git reflog&lt;br&gt;这命令会显示你的每一步操作,找到对应的MD5，用上一个命令返回就好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;本地关于分支的操作&quot;&gt;&lt;a href=&quot;#本地关于分支的操作&quot; class=&quot;headerlink&quot; title=&quot;本地关于分支的操作&quot;&gt;&lt;/a&gt;本地关于分支的操作&lt;/h2&gt;&lt;p&gt;查看分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git branch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git branch &lt;code&gt;theBrach&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;删除分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git branch -d &lt;code&gt;theBranch&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;切换分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git checkout &lt;code&gt;master&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;合并分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git merge &lt;code&gt;theBranch&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建分支并切换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git checkout -b &lt;code&gt;aBranch&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;与远程仓库交互&quot;&gt;&lt;a href=&quot;#与远程仓库交互&quot; class=&quot;headerlink&quot; title=&quot;与远程仓库交互&quot;&gt;&lt;/a&gt;与远程仓库交互&lt;/h2&gt;&lt;p&gt;查看远程仓库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git remote&lt;br&gt;git remote -v&lt;br&gt;git remote show &lt;code&gt;[remote-name]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从远程仓库克隆&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git clone \&lt;url&gt; \&lt;customname or=&quot;&quot; nil=&quot;&quot;&gt;&lt;br&gt;git clone &lt;a href=&quot;https://github.com/libgit2/libgit2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/libgit2/libgit2&lt;/a&gt; selfStocke&lt;/customname&gt;&lt;/url&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;添加远程仓库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git remote add &lt;code&gt;[remote-name]&lt;/code&gt; &lt;code&gt;[url]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;[remote-name]&lt;/code&gt; 用来指代 &lt;code&gt;[url]&lt;/code&gt;,是远程仓库的名称&lt;/p&gt;
&lt;p&gt;本地也有一个远程仓库，可以用&lt;code&gt;git branch -a&lt;/code&gt;查看，但是我们是无法更改的！&lt;/p&gt;
&lt;p&gt;添加远程分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git push &lt;code&gt;远程仓库名&lt;/code&gt; &lt;code&gt;分支名&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里其实走了一点捷径。Git 自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去”。我们将在第九章进一步介绍 refs/heads/ 部分的细节，不过一般使用的时候都可以省略它。也可以运行 git push origin serverfix:serverfix 来实现相同的效果，它的意思是“上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支”。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作 awesomebranch，可以用 git push origin serverfix:awesomebranch 来推送数据。&lt;/p&gt;
&lt;p&gt;删除远程分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git push &lt;code&gt;远程名&lt;/code&gt; :&lt;code&gt;分支名&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”&lt;/p&gt;
&lt;p&gt;拉取远程的更新到本地的“远程仓库”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git fetch &lt;code&gt;[remote-name]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此命令会到远程仓库中拉取所有你本地仓库中还没有的数据。运行完成后，你就可以在本地访问该远程仓库中的所有分支，将其中某个分支合并到本地，或者只是取出某个分支，一探究竟。&lt;strong&gt;fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拉取数据并自动合并&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git pull &lt;code&gt;[remote-name]&lt;/code&gt; &lt;code&gt;[branch-name]&lt;/code&gt;&lt;br&gt;git pull&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果设置了某个分支用于跟踪某个远端仓库的分支，可以使用 git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。在日常工作中我们经常这么用，既快且好。实际上，默认情况下 git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。&lt;/p&gt;
&lt;p&gt;设置本地分支跟踪远程分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git checkout -b &lt;code&gt;[本地分支名]&lt;/code&gt; &lt;code&gt;[远程仓库名]&lt;/code&gt;/&lt;code&gt;[远程分支名]&lt;/code&gt;&lt;br&gt;git checkout -b sf origin/serverfix&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Branch sf set up to track remote branch serverfix from origin.&lt;br&gt;Switched to a new branch ‘sf’&lt;br&gt;这命令的意思应该是新建本地分支并跟踪远程分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git checkout –track origin/serverfix&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Branch serverfix set up to track remote branch serverfix from origin.&lt;br&gt;Switched to a new branch ‘serverfix’&lt;/p&gt;
&lt;p&gt;设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 –set-upstream-to 选项运行 git branch 来显式地设置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git branch -u origin/serverfix&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Branch serverfix set up to track remote branch serverfix from origin.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git branch –set-upstream master origin/master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个命令也可以&lt;br&gt;&lt;strong&gt;推送数据到远程仓库&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git push &lt;code&gt;[remote-name]&lt;/code&gt; &lt;code&gt;[local_branch-name]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;远程仓库的删除和重命名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git remote rm &lt;code&gt;[remote-name]&lt;/code&gt;&lt;br&gt;git remote rename &lt;code&gt;[old-name]&lt;/code&gt; &lt;code&gt;[new-name]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果本地有多个分支，无论你在那个分支做的提交操作提交的都是主分支的改变&lt;br&gt;删除远程仓库后，本地的远程仓库镜像也会跟着消失！&lt;/p&gt;
&lt;p&gt;分支的衍合&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git checkout &lt;code&gt;branchA&lt;/code&gt;&lt;br&gt;git rebase &lt;code&gt;branchB&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在branchB上把branchA的改动补丁合并，&lt;br&gt;它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支 branchA）后续的历次提交对象（这里只有一个 C3），生成一系列文件补丁，然后以基底分支（也就是主干分支 branchB）最后一个提交对象（C4）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象（C3’），从而改写 branchA 的提交历史，&lt;strong&gt;使它成为 master 分支的直接下游&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：对于提交历史记录，rebase的作用只是把branchA的记录合并到branchB上去了，并不会让branchA的提交记录消失掉&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git初始化&quot;&gt;&lt;a href=&quot;#Git初始化&quot; class=&quot;headerlink&quot; title=&quot;Git初始化&quot;&gt;&lt;/a&gt;Git初始化&lt;/h2&gt;&lt;p&gt;安装 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo yum install git&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS中的图形绘制</title>
    <link href="http://yoursite.com/2016/05/06/iOS%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
    <id>http://yoursite.com/2016/05/06/iOS中的图形绘制/</id>
    <published>2016-05-06T08:06:56.000Z</published>
    <updated>2016-05-06T08:35:49.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;iOS中如何把图形绘制到屏幕上&lt;/li&gt;
&lt;li&gt;实现绘图的几种方式&lt;ul&gt;
&lt;li&gt;自定义UIView&lt;/li&gt;
&lt;li&gt;自定义CALayer&lt;/li&gt;
&lt;li&gt;实现图层代理 &lt;/li&gt;
&lt;li&gt;获取绘制的好之后的图片，然后显示图片(详情看demo)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;iOS中如何把图形绘制到屏幕上&quot;&gt;&lt;a href=&quot;#iOS中如何把图形绘制到屏幕上&quot; class=&quot;headerlink&quot; title=&quot;iOS中如何把图形绘制到屏幕上&quot;&gt;&lt;/a&gt;iOS中如何把图形绘制到屏幕上&lt;/h4&gt;&lt;p&gt;如果你想深入的了解iOS中的绘图，那么你先得了解iOS中几个用于绘图的框架以及他们的由来&lt;/p&gt;
&lt;h4 id=&quot;CoreGraphics框架&quot;&gt;&lt;a href=&quot;#CoreGraphics框架&quot; class=&quot;headerlink&quot; title=&quot;CoreGraphics框架:&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.apple.com/library/tvos/documentation/CoreGraphics/Reference/CoreGraphics_Framework/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;CoreGraphics&lt;/strong&gt;&lt;/a&gt;框架:&lt;/h4&gt;&lt;p&gt;有时候&lt;strong&gt;CoreGrphics&lt;/strong&gt;也会被称为&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Quartz 2D&lt;/strong&gt;&lt;/a&gt;，但是我认为这是不准确的，我们来看苹果的官方文档介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Core Graphics framework is a C-based API that is based on the Quartz advanced drawing engine. It provides low-level, lightweight 2D rendering with unmatched output fidelity. You use this framework to handle path-based drawing, transformations, color management, offscreen rendering, patterns, gradients and shadings, image data management, image creation, masking, and PDF document creation, display, and parsing. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;CoreGraphics&lt;/strong&gt;框架是基于&lt;strong&gt;Quartz 2D&lt;/strong&gt;的，并且&lt;strong&gt;UIKit&lt;/strong&gt;框架和&lt;strong&gt;AppKit&lt;/strong&gt;框架也包含了&lt;strong&gt;Quartz 2D&lt;/strong&gt;的一些简单API，如&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBezierPath_class/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;UIBeizerPath&lt;/em&gt;&lt;/a&gt;就是&lt;strong&gt;UIKit&lt;/strong&gt;框架下用于绘图的API。对于iOS来说，我们所有的图形绘制都是基于&lt;strong&gt;Quartz 2D&lt;/strong&gt;的(后面解释为什么)，但是我们不能说图形绘制都是基于&lt;strong&gt;CoreGraphics&lt;/strong&gt;的，这就是两者的区别所在。&lt;strong&gt;CoreGraphics&lt;/strong&gt;框架下用于绘制图形的API是&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/GraphicsImaging/Reference/CGContext/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;CGContextRef&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;UIKit框架：&quot;&gt;&lt;a href=&quot;#UIKit框架：&quot; class=&quot;headerlink&quot; title=&quot;UIKit框架：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKit_Framework/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIKit&lt;/a&gt;框架：&lt;/h4&gt;&lt;p&gt;iOS里只要涉及显示的控件基本都是&lt;strong&gt;UIKit&lt;/strong&gt;下的，而图形绘制的API-&lt;em&gt;UIBeizerPath&lt;/em&gt;只是其中很小的一部分功能，这里注意下，我在前文中也有提到，&lt;em&gt;UIBezierPath&lt;/em&gt;是基于&lt;strong&gt;Quartz 2D&lt;/strong&gt;的。&lt;/p&gt;
&lt;h4 id=&quot;QuartzCore框架&quot;&gt;&lt;a href=&quot;#QuartzCore框架&quot; class=&quot;headerlink&quot; title=&quot;QuartzCore框架&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/GraphicsImaging/Reference/QuartzCoreRefCollection/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QuartzCore&lt;/a&gt;框架&lt;/h4&gt;&lt;p&gt;这个框架中用于绘图的API是&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CALayer_class/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;CALayer&lt;/em&gt;&lt;/a&gt;，用于动画的API是&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAAnimation_class/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;CAAnimation&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;所以在iOS中用于绘图的API有3个，他们分别是&lt;em&gt;CGContextRef&lt;/em&gt;，&lt;em&gt;UIBezierPath&lt;/em&gt;，和&lt;em&gt;CALayer&lt;/em&gt;。&lt;em&gt;CALayer&lt;/em&gt;在绘图的时候，它的底层也是通过&lt;em&gt;CGContextRef&lt;/em&gt;实现的，所以，iOS的绘图都是基于&lt;strong&gt;Quartz 2D&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;绘图并不是随时调用都是有效的，比如你要画一个圆，你在ViewDidLoad中调用它，那么他是不会起作用的，iOS的图形绘制你需要把它加到当前的位图上去，并且在合适的时间调用它。&lt;/p&gt;
&lt;p&gt;有3种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义UIView&lt;/li&gt;
&lt;li&gt;自定义CALayer&lt;/li&gt;
&lt;li&gt;实现图层代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文对于成像原理不做深入的了解，对于成像原理有兴趣的同学&lt;a href=&quot;http://objccn.io/issue-3-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;点我&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;实现绘图的几种方式&quot;&gt;&lt;a href=&quot;#实现绘图的几种方式&quot; class=&quot;headerlink&quot; title=&quot;实现绘图的几种方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;实现绘图的几种方式&lt;/strong&gt;&lt;/h4&gt;&lt;h4 id=&quot;1-自定义UIView&quot;&gt;&lt;a href=&quot;#1-自定义UIView&quot; class=&quot;headerlink&quot; title=&quot;1.自定义UIView&quot;&gt;&lt;/a&gt;1.自定义UIView&lt;/h4&gt;&lt;p&gt;要想你的绘制实现，你需要在自定义UIView对象的.m文件中重写drawRect:(CGRect)rect方法，在这个方法中的绘制会显示在屏幕上。&lt;/p&gt;
&lt;p&gt;能触发视图更新的动作，也就是调用drawRect:(CGRect)rect方法的触发条件有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加视图addSubView&lt;/li&gt;
&lt;li&gt;对遮挡您的视图的其它视图进行移动或删除操作&lt;/li&gt;
&lt;li&gt;将视图的hidden属性声明设置为NO，使其从隐藏状态变为可见&lt;/li&gt;
&lt;li&gt;将视图滚出屏幕，然后再重新回到屏幕上&lt;/li&gt;
&lt;li&gt;显式调用视图的setNeedsDisplay或者setNeedsDisplayInRect:方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代码示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自定义一个UIView的子类-重写&lt;code&gt;drawRect:(CGRect)rect&lt;/code&gt;方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)drawRect:(CGRect)rect&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super drawRect:rect];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextRef ctx = UIGraphicsGetCurrentContext();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //宽度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetLineWidth(ctx, 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //线的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetStrokeColorWithColor(ctx, [UIColor redColor].CGColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //填充的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetFillColorWithColor(ctx, [UIColor purpleColor].CGColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *  线段头尾部样式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *  kCGLineCapButt:不绘制端点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *  kCGLineCapRound:圆弧&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *  kCGLineCapSquare:直角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetLineCap(ctx, kCGLineCapRound);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *  拐点样式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * kCGLineJoinMiter:直角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * kCGLineJoinRound:圆弧&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * kCGLineJoinBevel:斜角&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetLineJoin(ctx, kCGLineJoinBevel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //计算高度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat y = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat devideHeight = [[UIScreen mainScreen]bounds].size.height / 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat y1 = 16;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat y2 = y1 + devideHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat y3 = y1 + devideHeight * 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat y4 = y1 + devideHeight * 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat y5 = y1 + devideHeight * 4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat fx = 8;         //字开始的x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat cx = fx + 40;    //绘图开始的x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置字体 - 同时也会让画笔的颜色改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableDictionary *fontDic = [[NSMutableDictionary alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [fontDic setObject:[UIFont systemFontOfSize:14] forKey:NSFontAttributeName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [fontDic setObject:[UIColor blueColor] forKey:NSForegroundColorAttributeName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //左右居中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableParagraphStyle *ps = [[NSMutableParagraphStyle alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ps setAlignment:NSTextAlignmentNatural];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [fontDic setObject:ps forKey:NSParagraphStyleAttributeName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //直线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //上下居中的点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y = y1 + devideHeight / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *string = @&amp;quot;直线&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [string drawAtPoint:CGPointMake(fx, y - 8) withAttributes:fontDic];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//    [string drawInRect:CGRectMake(fx, y1, 60, devideHeight) withAttributes:fontDic];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetStrokeColorWithColor(ctx, [UIColor redColor].CGColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextMoveToPoint(ctx, cx, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx, 300, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextStrokePath(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //曲线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y = y2 + devideHeight / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string = @&amp;quot;曲线&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [string drawAtPoint:CGPointMake(fx, y - 8) withAttributes:fontDic];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//    CGContextMoveToPoint(ctx, cx, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddArc(ctx, cx + devideHeight / 2, y, devideHeight / 2, 0, M_PI / 2, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetStrokeColorWithColor(ctx, [UIColor redColor].CGColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextStrokePath(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //圆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y = y3 + devideHeight / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string = @&amp;quot;圆&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [string drawAtPoint:CGPointMake(fx, y - 8) withAttributes:fontDic];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetStrokeColorWithColor(ctx, [UIColor redColor].CGColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddEllipseInRect(ctx, CGRectMake(cx + 100, y3, devideHeight, devideHeight));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextStrokePath(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //矩形&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y = y4 + devideHeight / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string = @&amp;quot;矩形&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [string drawAtPoint:CGPointMake(fx, y - 8) withAttributes:fontDic];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetStrokeColorWithColor(ctx, [UIColor redColor].CGColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddRect(ctx, CGRectMake(cx + 36, y4, devideHeight, devideHeight));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextStrokePath(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //也可使用UIBezierPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y = y5 + devideHeight / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string = @&amp;quot;UIBezierPath绘图&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [string drawAtPoint:CGPointMake(fx, y - 8) withAttributes:fontDic];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIBezierPath *path = [[UIBezierPath alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [path addArcWithCenter:CGPointMake(370 / 2, y) radius:devideHeight /4 startAngle:0 endAngle:2*M_PI clockwise:YES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//    [path stroke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [path fill];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-自定义CALayer&quot;&gt;&lt;a href=&quot;#2-自定义CALayer&quot; class=&quot;headerlink&quot; title=&quot;2.自定义CALayer&quot;&gt;&lt;/a&gt;2.自定义CALayer&lt;/h4&gt;&lt;p&gt;自定义一个CALayer-重写&lt;code&gt;drawInContext:&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)drawInContext:(CGContextRef)ctx&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;3-drawInContext:%@&amp;quot;,ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    CGContextRotateCTM(ctx, M_PI_4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetRGBFillColor(ctx, 135.0/255.0, 232.0/255.0, 84.0/255.0, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSetRGBStrokeColor(ctx, 135.0/255.0, 232.0/255.0, 84.0/255.0, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    CGContextFillRect(ctx, CGRectMake(0, 0, 100, 100));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    CGContextFillEllipseInRect(ctx, CGRectMake(50, 50, 100, 100));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextMoveToPoint(ctx, 94.5, 33.5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //// Star Drawing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx,104.02, 47.39);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx,120.18, 52.16);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx,109.91, 65.51);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx,110.37, 82.34);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx,94.5, 76.7);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx,78.63, 82.34);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx,79.09, 65.51);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx,68.82, 52.16);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextAddLineToPoint(ctx,84.98, 47.39);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextClosePath(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextDrawPath(ctx, kCGPathFillStroke);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体的使用的话下载文末的代码自己看&lt;/p&gt;
&lt;h4 id=&quot;3-图层代理&quot;&gt;&lt;a href=&quot;#3-图层代理&quot; class=&quot;headerlink&quot; title=&quot;3.图层代理&quot;&gt;&lt;/a&gt;3.图层代理&lt;/h4&gt;&lt;p&gt;创建CALayer对象，设置他的代理为当前的视图控制器，实现代理方法&lt;code&gt;drawLayer:inContext:&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# pragma mark 图层代理绘图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)creatLayer&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //阴影图层&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CALayer *layerShadow = [[CALayer alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layerShadow.backgroundColor = [[UIColor blueColor]CGColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layerShadow.bounds = CGRectMake(0, 0, 100, 100);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layerShadow.position = self.view.center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layerShadow.cornerRadius = 100 / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layerShadow.shadowColor = [UIColor grayColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layerShadow.shadowOffset = CGSizeMake(10, 10);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layerShadow.shadowOpacity = 0.8;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.view.layer addSublayer:layerShadow];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _layer = [[CALayer alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _layer.backgroundColor = [UIColor purpleColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _layer.bounds = CGRectMake(0, 0, 100, 100);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _layer.position = self.view.center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _layer.cornerRadius = 100 / 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _layer.masksToBounds = YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //图形上下文形变，图片倒立问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    layer.transform = CATransform3DMakeRotation(M_PI, 1, 0, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_layer setValue:@M_PI forKeyPath:@&amp;quot;transform.rotation.x&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置外边框&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _layer.borderColor = [UIColor greenColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _layer.borderWidth = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //a1设置代理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _layer.delegate = self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_layer setNeedsDisplay];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //b1直接设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    UIImage *image = [UIImage imageNamed:@&amp;quot;girl&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    [layer setContents:(id)image.CGImage];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.view.layer addSublayer:_layer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextSaveGState(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat width = layer.bounds.size.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;图层代理&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    //图形上下文形变，图片倒立问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    CGContextScaleCTM(ctx, 1, -1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    CGContextTranslateCTM(ctx, 0, -width);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIImage *image = [UIImage imageNamed:@&amp;quot;girl&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextDrawImage(ctx, CGRectMake(0, 0, width, width), image.CGImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGContextRestoreGState(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码下载：&lt;br&gt;&lt;a href=&quot;https://github.com/codeTalkCC/blog-draw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub地址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;首页与3个界面的效果图分别如下：&quot;&gt;&lt;a href=&quot;#首页与3个界面的效果图分别如下：&quot; class=&quot;headerlink&quot; title=&quot;首页与3个界面的效果图分别如下：&quot;&gt;&lt;/a&gt;首页与3个界面的效果图分别如下：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/codeTalkCC/ArcitlePhotos/6b390b910f0f0723a1d1ce96c93b82058240873c/iOS%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/IMG_1786.jpg&quot; alt=&quot;首页&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/codeTalkCC/ArcitlePhotos/6b390b910f0f0723a1d1ce96c93b82058240873c/iOS%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/IMG_1787.jpg&quot; alt=&quot;自定义UIView&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/codeTalkCC/ArcitlePhotos/6b390b910f0f0723a1d1ce96c93b82058240873c/iOS%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/IMG_1788.jpg&quot; alt=&quot;自定义CALayer&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/codeTalkCC/ArcitlePhotos/6b390b910f0f0723a1d1ce96c93b82058240873c/iOS%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/IMG_1789.jpg&quot; alt=&quot;图层代理&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;iOS中如何把图形绘制到屏幕上&lt;/li&gt;
&lt;li&gt;实现绘图的几种方式&lt;ul&gt;
&lt;li&gt;自定义UIView&lt;/li&gt;
&lt;li&gt;自定义CALayer&lt;/li&gt;
&lt;li&gt;实现图层代理 &lt;/li&gt;
&lt;li&gt;获取绘制的好之后的图片，然后显示图片(详情看demo)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
